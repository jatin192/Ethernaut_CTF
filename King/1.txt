Selfdestruct  -> Transfer all fund from smartcontract D -> contract_C without calling receive funtion

contract contract_C {
    uint public a;
  receive() external payable {a= 2;}
}

contract D
{
    contract_C j;
    constructor(address payable i){j= contract_C(i);}
    function f1() payable  public 
    {
	    selfdestruct(payable(j))
    }
}

_______________________________________________________________________________________________________________________________________________________


transfer        vs       call{value: msg.value, gas: 50000, from: msg.sender}(data)


1. It limits the amount of gas available to the recipient contract to 21,000 gas.
2. This is often not sufficient if the receiving contract performs complex operations or makes external calls during the fallback function.
3. The idea behind limiting the gas is to prevent reentrancy attacks, where an attacker could repeatedly call back into the sender contract during the transfer.


1. The call function provides more control over the gas limit and allows the caller to specify the amount of gas to be sent along with the function call.
2. It returns a tuple with a boolean indicating success and the returned data.
3. Using call allows the sender to provide more gas to the recipient contract, making it more suitable for cases where the recipient contract may require additional gas to execute its code.
4. May cause Re-entrancy Attack

_______________________________________________________________________________________________________________________________________________________


Key Point:   

1.         contract A                  ->        contract B (have receive function)
   (use .call insted of transfer)

2. selfdestruct function  ->  Transfer all the fund from one smartcontract to another smartcontract or EOA without calling refceive function





