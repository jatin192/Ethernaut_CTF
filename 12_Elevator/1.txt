
Q1   contract instances ??  contract_1  i  =     new contract_1(1,2)     vs     contract(msg.sender)      vs      contract(adr)     ?????

Q2   In every new instance. Is address changes every time.

Q3 
    Importance of view Keyword
    f1()    did't return value correctly  (return value only show in remix console)
    f2()    return 899 correctly 



        contract A
        {
            uint public  a=889;
        }

        contract B 
        {
            function f(A i) public returns (uint)
            {
                return i.a();
            }
            function f2(A i) public view returns (uint)
            {
                return i.a();
            }
        }


Q4 can we use dynamic arrays inside function ? 




Ans 1

contract A
{
    function(B adr) public
    {
        adr.load_instance();
    }
}

contract B
{
    function load_instance() public view returns (address)                 //  This fucntion is only called by other Already deployed B contract
    {
        A i = A(msg.sender);                                             // load contract , msg.sender == already deployed contract address(!EOA) 
        return  address(i);
    }

        // or

    function load_instance(address adr) public view returns (address)
    {
        A i = A(adr);                                                  // load contract , adr ==  deployed contract address 
        return  address(i);
    }

}

contract C
{
    constructor(uint adr, uint a)
}

contract D
{
    function create_instance() public  returns (address)
    {
        C i = new C(1,2);                                        // creating  new instance with new  contract addresses every time
    } 
}





C i = new C(2,3);                ->           This code snippet creates a new instance of contract C type, assigning it to a variable named i. It then calls the constructor of contract C, passing the values 1 and 2 as arguments.

Requirement
A must have a constructor that accepts two integer arguments
When creating contract instances, ensure the constructor arguments match the expected types and meanings within the contract.






1   A i = A(msg.sender)               ->        create instance by loading contract at msg.sender address ,msg.sender should be a contract address
        or
2   A i = A(adr) 

Requirement
costructor have no impact
adr, msg.sender must be a contract address(!EOA)
you cant directly instract  in 1 becaue in direct interaction msg.sender == EOA    -> 1stly deploy A i which func external call to contract A 's function() {A i = A(msg.sender) }



Ans 2   : Yes  check using address(i)


Ans 3

        f1()     did't return value correctly  (return value only show in remix console)
        f2()     return 899 correctly 

        Because of View Keyword




Ans 4
        The push() function is not available for dynamic arrays in memory

        function functionName() public view returns (uint[] memory) 
        {
	        uint[] memory dynamicArray = new uint[](9);  // Initialize with size = 9
	        // dynamicArray.push(2);   ------> Error
            dynamicArray[8]=2;
		}








Additional Information

Always use solidity^<0.8.20

Potential Issue:            PUSH0 is a relatively new opcode.
                            Solidity versions 0.8.20 and above use the PUSH0 opcode (0x5f) which is only supported by Ethereum mainnet currently. 
                            Deploying to other chains with an older EVM might cause "invalid opcode"  error.

Functionality:              PUSH0 acts as a shortcut for placing the number 0 on the stack during contract execution.

Benefits:                   Reduced Code Size:    Compared to previous methods using multiple opcodes, PUSH0 reduces the bytecode size of your smart contract, making it more efficient.
                            Less DUP Usage   :    It eliminates the need for workarounds like using DUP instructions for duplicating zeros.